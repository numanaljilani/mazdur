// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  fullname      String
  bio           String?
  image         String?
  email         String         @unique
  password      String?
  phone         String?
  address       String?
  dob           String?
  nikname       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isContractor Boolean? @default(false)
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  bookmark      Bookmark[]
  booking       Booking[]
  notifications Notification[]
  history       String[]
  offer         String?        @db.ObjectId @map("Offers")
  bookmarks     String[]
  service       String?
  subService    String[]
  availability  Boolean?
  locality      String?
  price         String?
  unit          String?
  about         String?
  rating        String?
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @map("user_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String
  video     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  comments  Comment[]
  likes     Like[]
}

model Bookmark {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @map("user_id") @db.ObjectId
  contractorId String   @map("contractor_id") @db.ObjectId
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  contractor User @relation(fields: [contractorId], references: [id], onDelete: Cascade)
}

model Booking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @map("user_id") @db.ObjectId
  contractorId String   @map("contractor_id") @db.ObjectId
  date         DateTime
  time         String
  status       String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  contractor User @relation(fields: [contractorId], references: [id], onDelete: Cascade)
}

model Offers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  percent   Int
  title     String
  desc      String
  promo     String
  expiry    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  type      String
  broadcast Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String?  @map("user_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  postId    String   @map("post_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  postId    String   @map("post_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, postId])
}

// https://mazdur-ae769.firebaseapp.com/__/auth/handler
